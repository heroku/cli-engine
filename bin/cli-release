#!/bin/bash

set -ex

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)

VERSION=$("$DIR/version")

PLATFORMS=(
  windows-x86
  windows-x64
  darwin-x64
  linux-x86
  linux-x64
  linux-arm
)

if [ $# -ne 1 ]; then
  echo "USAGE: $0 CHANNEL"
  exit 1
fi

ROOT=$(pwd)
CHANNEL=$1
NAME=$(node -p "require('./package.json').name")
S3_BUCKET=$(node -p "require('./package.json')['cli-engine'].s3.bucket")
CLOUDFRONT_DISTRIBUTION=$(node -p "require('./package.json')['cli-engine'].cloudfront")

function release {
  "$DIR/cli-build" "$PLATFORM" "$CHANNEL"
  remote_path=$NAME/channels/$CHANNEL
  remote_base=s3://$S3_BUCKET/$remote_path
  aws s3 cp --cache-control max-age=86400 "tmp/build/$NAME-v$VERSION-$PLATFORM.tar.xz" "$remote_base/$NAME-v$VERSION-$PLATFORM.tar.xz"
  aws s3 cp --cache-control max-age=3600 "$remote_base/$NAME-v$VERSION-$PLATFORM.tar.xz" "$remote_base/$NAME-$PLATFORM.tar.xz"
  aws s3 cp --cache-control max-age=86400 "tmp/build/$NAME-v$VERSION-$PLATFORM.tar.gz" "$remote_base/$NAME-v$VERSION-$PLATFORM.tar.gz"
  aws s3 cp --cache-control max-age=3600 "$remote_base/$NAME-v$VERSION-$PLATFORM.tar.gz" "$remote_base/$NAME-$PLATFORM.tar.gz"
  aws s3 cp --cache-control max-age=3600 --content-type application/json "tmp/build/$PLATFORM" "$remote_base/$PLATFORM"
}

pids=""
RESULT=0

# install dependencies
YARN_DIR="$ROOT/tmp/build/yarn"
mkdir -p "$YARN_DIR"
cp "$ROOT/package.json" "$YARN_DIR"
cp "$ROOT/yarn.lock" "$YARN_DIR"
cd "$YARN_DIR"
yarn --production --prefer-offline --pure-lockfile
cd "$ROOT"

for PLATFORM in "${PLATFORMS[@]}"; do
  release &
  pids="$pids $!"
  sleep 3
done

for pid in $pids; do
  wait "$pid" || let "RESULT=1"
done

cat << EOF > tmp/build/version
{
  "channel": "$CHANNEL",
  "version": "$VERSION"
}
EOF

if [ $RESULT -ne 0 ]; then
  exit $RESULT
fi

aws s3 cp --cache-control max-age=3600 --content-type application/json tmp/build/version "s3://$S3_BUCKET/$NAME/channels/$CHANNEL/version"

# invalidate CDN
if [ "$CLOUDFRONT_DISTRIBUTION" != "undefined" ]; then
  aws cloudfront create-invalidation --distribution-id EHF9FOCUJYVZ --paths "/$NAME/channels/$CHANNEL/*"
fi

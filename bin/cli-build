#!/bin/bash

set -ex

if [ $# -ne 2 ]; then
  echo "USAGE: $0 PLATFORM CHANNEL"
  exit 1
fi

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)

PLATFORM=$1
CHANNEL=$2
VERSION=`$DIR/version`
NODE_VERSION=`node -p "require('./package.json')['cli-engine'].node || process.versions.node"`
NAME=`node -p "require('./package.json').name"`
BIN=`node -p "require('./package.json')['cli-engine'].bin || require('./package.json').name"`
ROOT=`pwd`

IFS='-' read -ra INFO <<< "$PLATFORM"
OS=${INFO[0]}
ARCH=${INFO[1]}

# setup workspace
TARBALL_BASE=$NAME-v$VERSION-$PLATFORM
WORKSPACE=$ROOT/tmp/build/$TARBALL_BASE
rm -rf $WORKSPACE
mkdir -p $ROOT/tmp/cache
mkdir -p $WORKSPACE/node_modules
mkdir -p $WORKSPACE/bin
if [ -f README.md ]; then cp README.md $WORKSPACE; fi
if [ -f LICENSE ]; then cp LICENSE $WORKSPACE; fi
cp package.json $WORKSPACE

# install packages
cd $WORKSPACE

if [ -d "$ROOT/tmp/build/yarn" ]; then
  cp "$ROOT/tmp/build/yarn/package.json" "$WORKSPACE"
  cp "$ROOT/tmp/build/yarn/yarn.lock" "$WORKSPACE"
  cp -r "$ROOT/tmp/build/yarn/node_modules" "$WORKSPACE"
else
  yarn install --no-progress --production
fi
if [ ! -f $WORKSPACE/node_modules/cli-engine/lib/cli.js ]; then
  cd $WORKSPACE/node_modules/cli-engine
  yarn
  yarn run prepare
fi

# install node
if [ "$OS" == windows ]; then
  NODE_BASE=node-v$NODE_VERSION-win-$ARCH
  if [ ! -f $ROOT/tmp/cache/$NODE_BASE.7z ]; then
    URL=https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-win-$ARCH.7z
    curl -fSsLo $ROOT/tmp/cache/$NODE_BASE.7z $URL
  fi
  cd $WORKSPACE
  7z x -bd -y $ROOT/tmp/cache/$NODE_BASE.7z > /dev/null
  mv $WORKSPACE/$NODE_BASE/node.exe $WORKSPACE/bin/node.exe
  rm -rf $WORKSPACE/$NODE_BASE
else
  if [ "$ARCH" == "arm" ]; then NODE_ARCH=armv7l; else NODE_ARCH="$ARCH"; fi
  NODE_BASE=node-v$NODE_VERSION-$OS-$NODE_ARCH
  if [ ! -f $ROOT/tmp/cache/$NODE_BASE.tar.xz ]; then
    URL=https://nodejs.org/dist/v$NODE_VERSION/$NODE_BASE.tar.xz
    curl -fSLo $ROOT/tmp/cache/$NODE_BASE.tar.xz $URL
  fi
  tar -C $WORKSPACE -xf $ROOT/tmp/cache/$NODE_BASE.tar.xz
  mv $WORKSPACE/$NODE_BASE/bin/node $WORKSPACE/bin/node
  rm -rf $WORKSPACE/$NODE_BASE
fi

# create bin runner
if [ "$OS" == windows ]; then
  cat << EOF > $WORKSPACE/bin/$BIN.cmd
@echo off
set CLI_BINPATH=%~dp0\\$BIN.cmd
"%~dp0\\node.exe" "%~dp0\\$BIN.js" %*
EOF
else
  cat << EOF > $WORKSPACE/bin/$BIN
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
# normalize home directory
CLI_HOME=\$(cd && pwd)
XDG_DATA_HOME=\${XDG_DATA_HOME:="\$CLI_HOME/.local/share"}
BIN_DIR="\$XDG_DATA_HOME/$BIN/client/bin"
if [ -x "\$BIN_DIR/$BIN" ] && [ ! "\$BIN_DIR" -ef "\$DIR" ]; then
  "\$XDG_DATA_HOME/$BIN/client/bin/$BIN" "\$@"
else
  CLI_BINPATH="\$DIR/$BIN" "\$DIR/node" "\$DIR/$BIN.js" "\$@"
fi
EOF
chmod +x $WORKSPACE/bin/$BIN
fi

cat << EOF > $WORKSPACE/bin/$BIN.js
const path = require('path')
const CLI = require('cli-engine').default
const root = path.join(__dirname, '..')
const cli = new CLI({
  argv: process.argv.slice(1),
  config: {
    root,
    pjson: require(path.join(root, 'package.json')),
    channel: '$CHANNEL',
    version: '$VERSION'
  }
})
cli.run()
EOF

cd $ROOT/tmp/build

# create tarballs
tar c $TARBALL_BASE | xz > $TARBALL_BASE.tar.xz
tar czf $TARBALL_BASE.tar.gz $TARBALL_BASE

SHA256=`shasum -a 256 $TARBALL_BASE.tar.gz | awk {'print \$1'}`
SHA256XZ=`shasum -a 256 $TARBALL_BASE.tar.xz | awk {'print \$1'}`
cat << EOF > $PLATFORM
{
  "channel": "$CHANNEL",
  "version": "$VERSION",
  "sha256gz": "$SHA256",
  "sha256xz": "$SHA256XZ"
}
EOF

cd $ROOT
